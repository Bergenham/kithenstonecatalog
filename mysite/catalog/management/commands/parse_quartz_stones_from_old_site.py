# import os
# import re
# import time
# import requests
# from django.core.files.base import ContentFile
# from django.core.management.base import BaseCommand
# from bs4 import BeautifulSoup
#
# from selenium import webdriver
# from selenium.webdriver.chrome.options import Options
# from selenium.webdriver.chrome.service import Service
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
#
# from catalog.models import QuartzStone, StoneImage
#
#
# class Command(BaseCommand):
#     help = "–ü–∞—Ä—Å–∏—Ç –∫–≤–∞—Ä—Ü–µ–≤—ã–µ –∫–∞–º–Ω–∏ —Å quartz.makerstone.ru –∏ —Å–æ–∑–¥–∞—ë—Ç –º–æ–¥–µ–ª–∏"
#
#     def handle(self, *args, **options):
#         chrome_options = Options()
#         chrome_options.add_argument("--log-level=3")
#         chrome_options.add_argument("--disable-gcm-initialization")
#         chrome_options.add_argument("--disable-features=GCMDriver")
#         chrome_options.add_experimental_option("excludeSwitches", ["enable-logging", "enable-automation"])
#         chrome_options.add_argument("--ignore-certificate-errors")
#         chrome_options.add_argument("--disable-blink-features=AutomationControlled")
#         chrome_options.add_argument("--disable-gcm")
#         # chrome_options.add_argument("--headless=new")
#
#         # –ø–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏ chromedriver
#         service = Service(log_path=os.devnull)
#
#         self.stdout.write("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
#         driver = webdriver.Chrome(service=service, options=chrome_options)
#         wait = WebDriverWait(driver, 15)
#
#         catalog_url = "http://quartz.makerstone.ru/catalog"
#         self.stdout.write("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...")
#         driver.get(catalog_url)
#         time.sleep(2)
#
#         # –ñ–º—ë–º "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë"
#         while True:
#             try:
#                 btn = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".js-store-load-more-btn")))
#                 driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)
#                 driver.execute_script("arguments[0].click();", btn)
#                 self.stdout.write("üîÑ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë'...")
#                 time.sleep(2)
#             except Exception:
#                 self.stdout.write("‚úÖ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
#                 break
#
#         cards = driver.find_elements(By.CSS_SELECTOR, ".js-store-grid-cont .js-product")
#         urls = [card.find_element(By.TAG_NAME, "a").get_attribute("href") for card in cards]
#         self.stdout.write(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(urls)} –∫–∞—Ä—Ç–æ—á–µ–∫")
#
#         for idx, url in enumerate(urls, 1):
#             self.stdout.write(f"\n[{idx}/{len(urls)}] üîß –û–±—Ä–∞–±–æ—Ç–∫–∞: {url}")
#             try:
#                 driver.get(url)
#                 wait.until(EC.presence_of_element_located((By.CLASS_NAME, "scrollbooster-content")))
#                 time.sleep(1.5)
#
#                 soup = BeautifulSoup(driver.page_source, "html.parser")
#
#                 def sel(css, field_name):
#                     el = soup.select_one(css)
#                     if el:
#                         v = el.get_text(strip=True)
#                         self.stdout.write(f"‚úÖ {field_name}: {v}")
#                         return v
#                     self.stdout.write(f"‚ö†Ô∏è  {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#                     return ''
#
#                 # –ü–∞—Ä—Å–∏–º –ø–æ–ª—è
#                 name_stone    = sel('div.t396__elem.name div.tn-atom', "name_stone")
#                 abt_prise     = sel('div.t396__elem.price div.tn-atom', "abt_prise").replace(" ", "").replace("—Ä.", "")
#                 material      = sel('.tn-elem.tabname-2 .tn-atom', "material")
#                 country       = sel('.tn-elem.tabname-5 .tn-atom', "country")
#                 thickness     = re.sub(r'\D', '', sel('.tn-elem.tabname-4 .tn-atom', "thickness"))
#                 article       = sel('.tn-elem.tabname-6 .tn-atom', "article")
#                 about_brand   = sel('div.tn-elem.text div.tn-atom', "about_brand")
#                 scraped_brand = sel('.tn-elem.tabname-1 .tn-atom', "brand_stone")
#                 color         = sel('.tn-elem.tabname-3 .tn-atom', "color")
#                 texture       = sel('.tn-elem.tabname-7 .tn-atom', "texture")
#                 faktura       = sel('.tn-elem.tabname-8 .tn-atom', "faktura")
#
#                 # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
#                 link_serf_el = soup.select_one("div.t1075__row a.t1075__link")
#                 link_serf = link_serf_el["href"] if link_serf_el else ""
#                 self.stdout.write(f"‚úÖ link_serf: {link_serf}")
#
#                 # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥ –ø–æ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ Caesarstone –∏–ª–∏ Technistone
#                 if link_serf == 'https://drive.google.com/drive/folders/1YgXlFi8KKDzPHz5IheKJlbepOqd1sl3M':
#                     link_serf = 'Caesarstone'
#                 elif link_serf == 'https://technistone.ru/info/certificates/':
#                     link_serf = 'Technistone'
#                 else:
#                     link_serf = 'Not Founded'
#
#                 # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#                 raw_urls = set()
#                 for tag in soup.find_all(style=True):
#                     for u in re.findall(r'url\(["\']?([^"\'\)]+)', tag['style']):
#                         u = u.strip('"\' ').replace('&quot;', '')
#                         if re.search(r'\.(jpe?g|png|gif|webp|bmp|svg)', u, re.I) and '-/' not in u:
#                             raw_urls.add(u)
#                 res_a_img = list(raw_urls)
#                 self.stdout.write(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(res_a_img)}")
#
#                 # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–º–Ω—è
#                 stone, created = QuartzStone.objects.get_or_create(
#                     article=article,
#                     defaults=dict(
#                         name_stone=name_stone,
#                         abt_prise=abt_prise,
#                         material=material,
#                         country=country,
#                         thickness=thickness,
#                         about_brand=about_brand,
#                         archive=False,
#                         brand_stone=scraped_brand,
#                         color=color,
#                         texture=texture,
#                         faktura=faktura,
#                         link_serf=link_serf,
#                     )
#                 )
#
#                 # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
#                 if not created:
#                     stone.link_serf = link_serf
#                     stone.save(update_fields='link_serf')
#
#                 # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ
#                 stone.example_images.all().delete()
#                 for i, img_url in enumerate(res_a_img, 1):
#                     resp = requests.get(img_url)
#                     name = f"{name_stone}_other_{i}.jpg"
#                     StoneImage.objects.create(
#                         stone=stone,
#                         image=ContentFile(resp.content, name=name)
#                     )
#
#                 self.stdout.write(self.style.SUCCESS(
#                     f"{'üÜï –°–æ–∑–¥–∞–Ω–æ' if created else '‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ'}: {name_stone}"
#                 ))
#
#             except Exception as e:
#                 self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {url}: {e}"))
#
#         driver.quit()
#         self.stdout.write(self.style.SUCCESS("üèÅ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω."))
